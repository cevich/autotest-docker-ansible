---

# Depends:
#   is_atomic
# Registers:
#   rpms_updated: boolean
#   needs_reboot: boolean

- fail:
    msg: "Attempt to apply the atomic_upgrade role onto a non-Atomic host"
  when: not is_atomic

- name: Record upgrade diff check output
  command: atomic host upgrade --check-diff
  register: upgrade_check
  # 0 == Upgrade ready, applicable, & available.
  # 77 == No change
  # 1 == Error or no newer upgrade available
  failed_when: upgrade_check.rc not in [0,77] and
               not upgrade_check.stderr | search('older than current revision') and
               not upgrade_check.stdout | search('No upgrade available.')
  changed_when: False

- name: Set _needs_upgrade flag False
  set_fact:
    _needs_upgrade: False

- name: Set _needs_upgrade flag True when indicated by atomic diff
  set_fact:
    _needs_upgrade: True
  when: upgrade_check.rc == 0

- debug: var=upgrade_check

- block:

    - name: Workaround BZ1290281
      selinux:
        policy: targeted
        state: permissive

    - name: Atomic host is updated to latest tree
      command: atomic host upgrade
      register: atomic_host_upgrade
      changed_when: atomic_host_upgrade.rc in [0,77]
      failed_when: atomic_host_upgrade.rc not in [0,77]  # BZ1313540
      until: atomic_host_upgrade | success
      retries: 3

  always:

    - name: Undo Workaround BZ1290281
      selinux:
        policy: targeted
        state: enforcing

  when: _needs_upgrade

- name: rpms_updated + needs_reboot are set on update
  set_fact:
    rpms_updated: True
    needs_reboot: True
  when: atomic_host_upgrade is defined and
        atomic_host_upgrade | changed

- name: rpms_updated is set false
  set_fact:
        # Leave needs_reboot state as-is, but rpms_updated flag safe to flip
        rpms_updated: False
  when: atomic_host_upgrade is undefined
